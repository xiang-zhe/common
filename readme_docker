1, install
  https://docs.docker.com/install/linux/docker-ce/ubuntu/
2, nvidia-docker
  https://github.com/NVIDIA/nvidia-docker
  
  
Q:
  1  docker: Error response from daemon: Unknown runtime specified nvidia.
    A : sudo mkdir -p /etc/systemd/system/docker.service.d
        sudo tee /etc/systemd/system/docker.service.d/override.conf <<EOF
        [Service]
        ExecStart=
        ExecStart=/usr/bin/dockerd --host=fd:// --add-runtime=nvidia=/usr/bin/nvidia-container-runtime
        EOF
        sudo systemctl daemon-reload
        sudo systemctl restart docker
        sudo tee /etc/docker/daemon.json <<EOF
        {
            "runtimes": {
                "nvidia": {
                    "path": "/usr/bin/nvidia-container-runtime",
                    "runtimeArgs": []
                }
            }
        }                    
        EOF
        sudo pkill -SIGHUP dockerd            
        
  2  docker-nvidia：未找到命令
    A: nvidia-docker
    
  3 git cannot found commend，
    A： apt-get update
        apt-get install
                
config：
  修改镜像仓库：
    临时修改
    docker run hello-world --registry-mirror=https://docker.mirrors.ustc.edu.cn
    永久修改
    vim /etc/docker/daemon.json
    {
    "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]
    }
  修改镜像储存位置：
    vim /etc/docker/daemon.json
    {
    "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]，
     "graph": "/mnt/docker-data", 
     "storage-driver": "overlay" 
    }
  docker info可查看到修改后的信息
  
pull：
  直接pull总会是not found，只要加上tag就ok（：tag）
  
run :
  在容器中运行"echo"命令，输出"hello word"  
  $docker run image_name echo "hello word"  

  交互式进入容器中  
  $docker run -i -t image_name /bin/bash  
    exit (ctrl+d)
    docker attach 容器ID(再次进入)/如果进不去使用docker exec -it name /bin/bash
    docker run --name test -it -v /home/xqh/myimage:/data ubuntu /bin/bash
    其中的 -v 标记 在容器中设置了一个挂载点 /data（就是容器中的一个目录），并将主机上的 /home/xqh/myimage 目录中的内容关联到 /data下。

  在容器中安装新的程序  
  $docker run image_name apt-get install -y app_name 
  
image commit :
  保存对容器的修改; -a, --author="" Author; -m, --message="" Commit message  
  $docker commit ID new_image_name  
  
  
option :
  删除所有容器  
  $docker rm `docker ps -a -q`  

  删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container  
  $docker rm Name/ID  

  停止、启动、杀死一个容器  
  $docker stop Name/ID  
  $docker start Name/ID  
  $docker kill Name/ID  

  从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps  
  $docker logs Name/ID  

  列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的  
  $docker diff Name/ID  

  显示一个运行的容器里面的进程信息  
  $docker top Name/ID  

  从容器里面拷贝文件/目录到本地一个路径  
  $docker cp Name:/container_path to_path  
  $docker cp ID:/container_path to_path  

  重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10  
  $docker restart Name/ID  

  附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process  
  $docker attach ID  
